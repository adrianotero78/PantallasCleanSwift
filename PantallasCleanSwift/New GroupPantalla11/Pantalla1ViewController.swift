//
//  Pantalla1ViewController.swift
//  PantallasCleanSwift
//
//  Created by Adrian on 24-05-22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol Pantalla1DisplayLogic: class
{
  func displaySomething(viewModel: Pantalla1.Something.ViewModel)
}

class Pantalla1ViewController: UIViewController, Pantalla1DisplayLogic
{
  var interactor: Pantalla1BusinessLogic?
  var router: (NSObjectProtocol & Pantalla1RoutingLogic & Pantalla1DataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = Pantalla1Interactor()
    let presenter = Pantalla1Presenter()
    let router = Pantalla1Router()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
      //viewController.restorationIdentifier = "Pantalla1ViewController"
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    presentaPantalla()
  }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
    let tituloLabel: UILabel = {
        let label = UILabel()
        label.numberOfLines = 0
        label.text = "Ingrese:"
        label.translatesAutoresizingMaskIntoConstraints = false
        
        return label
    }()
    
    let infoLabel: UILabel = {
        let label = UILabel()
        label.numberOfLines = 0
        label.text = "USUARIO Y/O CLAVE INVALIDA"
        label.textColor = .white
        label.translatesAutoresizingMaskIntoConstraints = false
        
        return label
    }()
    
    let loginTextField: UITextField = {
        //let textField = UITextField(frame: CGRect(x: 190, y: 100, width: 300.00, height: 30.00))
        let textField = UITextField()
        textField.font = UIFont.systemFont(ofSize: 20)
        textField.placeholder = "Ingrese login"
        //textField.text = "UITextField example"
        textField.borderStyle = UITextField.BorderStyle.roundedRect
        textField.backgroundColor = UIColor.lightGray
        textField.textColor = UIColor.blue
        textField.translatesAutoresizingMaskIntoConstraints = false
        
        return textField
    }()
    
    let claveTextField: UITextField = {

        let textField = UITextField()
        textField.font = UIFont.systemFont(ofSize: 20)
        textField.placeholder = "Ingrese clave"
        textField.borderStyle = UITextField.BorderStyle.roundedRect
        textField.backgroundColor = UIColor.lightGray
        textField.textColor = UIColor.black
        textField.isSecureTextEntry = true
        textField.translatesAutoresizingMaskIntoConstraints = false
        
        return textField
    }()
    
    let loginButton : UIButton = {
        let boton = UIButton(type: .system)
        boton.setTitleColor(.red, for: .normal)
        boton.setTitle("ENVIAR", for: .normal)
        boton.backgroundColor = .blue
        boton.translatesAutoresizingMaskIntoConstraints = false
        boton.addTarget(self, action: #selector(validar), for: .touchUpInside)
        
        return boton
    }()
    
    @objc func validar(sender: UIButton!){
        print ("QQQQQQ")
        let request = Pantalla1.Something.Request.init(loginRequest: loginTextField.text ?? "Sin NOMBRE", passwordRequest: claveTextField.text ?? "Sin CLAVE")
        interactor?.doSomething(request: request)
        
    }
  func presentaPantalla()
  {
      view.addSubview(tituloLabel)
      view.addSubview(loginTextField)
      view.addSubview(claveTextField)
      view.addSubview(loginButton)
      view.addSubview(infoLabel)
    
      NSLayoutConstraint.activate([
        tituloLabel.centerYAnchor.constraint(equalTo: view.centerYAnchor, constant: -200),
        tituloLabel.centerXAnchor.constraint(equalTo: view.centerXAnchor),
        
        loginTextField.widthAnchor.constraint(equalToConstant: 200),
        loginTextField.heightAnchor.constraint(equalToConstant: 30),
        loginTextField.centerXAnchor.constraint(equalTo: tituloLabel.centerXAnchor),
        loginTextField.bottomAnchor.constraint(equalTo: tituloLabel.bottomAnchor, constant: 50),
        
        claveTextField.widthAnchor.constraint(equalToConstant: 200),
        claveTextField.heightAnchor.constraint(equalToConstant: 30),
        claveTextField.centerXAnchor.constraint(equalTo: tituloLabel.centerXAnchor),
        claveTextField.bottomAnchor.constraint(equalTo: loginTextField.bottomAnchor, constant: 50),
        
        loginButton.widthAnchor.constraint(equalToConstant: 150),
        loginButton.heightAnchor.constraint(equalToConstant: 30),
        loginButton.centerXAnchor.constraint(equalTo: tituloLabel.centerXAnchor),
        loginButton.bottomAnchor.constraint(equalTo: claveTextField.bottomAnchor, constant: 50),
        
        infoLabel.centerXAnchor.constraint(equalTo: tituloLabel.centerXAnchor),
        infoLabel.bottomAnchor.constraint(equalTo: loginButton.bottomAnchor, constant: 50),
      ])
  }
  
  func displaySomething(viewModel: Pantalla1.Something.ViewModel)
  {
    //nameTextField.text = viewModel.name
      loginTextField.text = viewModel.nombreVM
      claveTextField.text = viewModel.passwordVM
      if !viewModel.validacionVM {
          infoLabel.textColor = .black
      }else {
          router?.routeToPantalla2(segue: nil)
          //infoLabel.textColor = .white
      }
  }
}
